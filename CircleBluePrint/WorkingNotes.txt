    /*
botBlk 64 64 64 #FF404040 colBlack
botBlu 10 109 191 #FF0A6DBF colBlue
botGrn 68 128 68 #FF448044 colGreen
botGry 191 191 191 #FFBFBFBF colGrey
botRed 204 10 10 #FFCC0A0A colRed
botWht 255 255 255 #FFFFFFFF colWhite
botYel 255 197 38 #FFFFC526 colYellow
topBlk 13 13 13 #FF0D0D0D colBlack1
topBlu 28 90 140 #FF1C5A8C colBlue1
topGrn 52 76 52 #FF344C34 colGreen1
topGry 140 140 140 #FF8C8C8C colGrey1
topRed 153 31 31 #FF991F1F colRed1
topWht 242 242 242 #FFF2F2F2 colWhite1
topYel 207 168 62 #FFCFA83E colYellow1


-------------------	

If you want to use namespaces, LINQ to XML makes that really easy:

XNamespace ab = "http://whatever-the-url-is";
XElement tempElement = doc.Descendants(ab + "test").FirstOrDefault();

Look for an xmlns:ab=... section in your document to find out which namespace URI "ab" refers to.

-------------------
  

    /*
         SplashScreen sc = new SplashScreen("./images/saving.png");
                   sc.Show(true);
                   string writeFile = newFileNameTxt.Text;
                   StreamWriter newFile = new StreamWriter(writeFile);
                   for (int i = 0; i < originalFileAry.Length; i++) { newFile.WriteLine(originalFileAry[i]); }
                   newFile.Close(); sc.Close(TimeSpan.FromMilliseconds(1000));
   */
    /*
There's a bit of converting that you have to do if you take a raw HSV value into the SE format.
 X is the percentage of the hue 360, if you take (x * 360) you'll get the Hue value in HSV.
 Y is the saturation -1 to 1 which translates to -100 to 100 (Y * 100) matching the in game color slider
 (some graphics programs only do 0 to 100).
 Z is the value -1 to 1 which translates to -100 to 100 (Z * 100) matching the in game color slider values.

     standard to se =(value/100)*200-100

   se to Standard  =(value+100)/200*100  
     */